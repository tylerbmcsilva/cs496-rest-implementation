const db  = require('./index');

// {
//   "id":"abc123", #this should be automatically generated by your API and should probably be a string
//   "name": "Sea Witch", #The name of the boat, a string
//   "type":"Catamaran", #The type of boat, power boat, sailboat, catamaran etc. a string
//   "length":28, #The length of the boat
//   "at_sea":false #A boolean indicating if the boat is at sea or not
// }

const KIND = 'boat';


async function getAllBoats() {
  try {
    return await db.getAllOfKind(KIND);
  } catch (error) {
    throw error;
  }
}


async function createBoat({ name, type, length }) {
  try {
    const data = {
      name,
      type,
      length,
      at_sea: true
    };

    return await db.createEntity({ KIND, data });
  } catch (error) {
    throw error;
  }
}


async function getBoat({ id }){
  try {
    return await db.getEntityById({ KIND, id });
  } catch (error) {
    throw error;
  }
}


async function updateBoat({ id, name, type, length, at_sea }) {
  try {
    const data = {
        name,
        type,
        length,
        at_sea
    };

    return await db.updateEntity({ KIND, id, data });
  } catch (error) {
    throw error;
  }
}


async function deleteBoat({ id }) {
  try {
    return await db.deleteEntity({ KIND, id });
  } catch (error) {
    throw error;
  }
}


async function isUnique({ name }){
  const response = await db.filterDatabase({
    KIND,
    key:    'name',
    value:  name
  });

  if ( response[0].length > 0 )
    return false;
  else
    return true;
}


async function arrive({ boatid }) {
  const boat    = await getBoat({ id: boatid });
  if(!boat.at_sea) {
    let err = Error('Boat already docked');
    err.name = 'BoatDockedError';
    throw err;
  }
  boat.at_sea   = false;
  return await updateBoat(boat);
}


async function depart({ boatid }) {
  const boat    = await getBoat({ id: boatid });
  boat.at_sea   = true;
  return await updateBoat(boat);
}

module.exports = {
  getAllBoats,
  createBoat,
  getBoat,
  updateBoat,
  deleteBoat,
  arrive,
  depart,
  isUnique
}
